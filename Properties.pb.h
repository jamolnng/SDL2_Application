// Generated by the protocol buffer compiler.  DO NOT EDIT! LOL my butt I don't edit this
// source: Properties.proto

#ifndef PROTOBUF_Properties_2eproto__INCLUDED
#define PROTOBUF_Properties_2eproto__INCLUDED

#include <string>

using std::string;

#include <stdint.h>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Properties_2eproto();
void protobuf_AssignDesc_Properties_2eproto();
void protobuf_ShutdownFile_Properties_2eproto();

class Property;
class Properties;

// ===================================================================

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double double_value = 2;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 2;
  inline double double_value() const;
  inline void set_double_value(double value);

  // optional float float_value = 3;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 3;
  inline float float_value() const;
  inline void set_float_value(float value);

  // optional int32 int32_value = 4;
  inline bool has_int32_value() const;
  inline void clear_int32_value();
  static const int kInt32ValueFieldNumber = 4;
  inline ::google::protobuf::int32 int32_value() const;
  inline void set_int32_value(::google::protobuf::int32 value);

  // optional int64 int64_value = 5;
  inline bool has_int64_value() const;
  inline void clear_int64_value();
  static const int kInt64ValueFieldNumber = 5;
  inline ::google::protobuf::int64 int64_value() const;
  inline void set_int64_value(::google::protobuf::int64 value);

  // optional uint32 uint32_value = 6;
  inline bool has_uint32_value() const;
  inline void clear_uint32_value();
  static const int kUint32ValueFieldNumber = 6;
  inline ::google::protobuf::uint32 uint32_value() const;
  inline void set_uint32_value(::google::protobuf::uint32 value);

  // optional uint64 uint64_value = 7;
  inline bool has_uint64_value() const;
  inline void clear_uint64_value();
  static const int kUint64ValueFieldNumber = 7;
  inline ::google::protobuf::uint64 uint64_value() const;
  inline void set_uint64_value(::google::protobuf::uint64 value);

  // optional sint32 sint32_value = 8;
  inline bool has_sint32_value() const;
  inline void clear_sint32_value();
  static const int kSint32ValueFieldNumber = 8;
  inline ::google::protobuf::int32 sint32_value() const;
  inline void set_sint32_value(::google::protobuf::int32 value);

  // optional sint64 sint64_value = 9;
  inline bool has_sint64_value() const;
  inline void clear_sint64_value();
  static const int kSint64ValueFieldNumber = 9;
  inline ::google::protobuf::int64 sint64_value() const;
  inline void set_sint64_value(::google::protobuf::int64 value);

  // optional fixed32 fixed32_value = 10;
  inline bool has_fixed32_value() const;
  inline void clear_fixed32_value();
  static const int kFixed32ValueFieldNumber = 10;
  inline ::google::protobuf::uint32 fixed32_value() const;
  inline void set_fixed32_value(::google::protobuf::uint32 value);

  // optional fixed64 fixed64_value = 11;
  inline bool has_fixed64_value() const;
  inline void clear_fixed64_value();
  static const int kFixed64ValueFieldNumber = 11;
  inline ::google::protobuf::uint64 fixed64_value() const;
  inline void set_fixed64_value(::google::protobuf::uint64 value);

  // optional sfixed32 sfixed32_value = 12;
  inline bool has_sfixed32_value() const;
  inline void clear_sfixed32_value();
  static const int kSfixed32ValueFieldNumber = 12;
  inline ::google::protobuf::int32 sfixed32_value() const;
  inline void set_sfixed32_value(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_value = 13;
  inline bool has_sfixed64_value() const;
  inline void clear_sfixed64_value();
  static const int kSfixed64ValueFieldNumber = 13;
  inline ::google::protobuf::int64 sfixed64_value() const;
  inline void set_sfixed64_value(::google::protobuf::int64 value);

  // optional bool bool_value = 14;
  inline bool has_bool_value() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 14;
  inline bool bool_value() const;
  inline void set_bool_value(bool value);

  // optional string string_value = 15;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 15;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  inline void set_allocated_string_value(::std::string* string_value);

  // optional bytes bytes_value = 16;
  inline bool has_bytes_value() const;
  inline void clear_bytes_value();
  static const int kBytesValueFieldNumber = 16;
  inline const ::std::string& bytes_value() const;
  inline void set_bytes_value(const ::std::string& value);
  inline void set_bytes_value(const char* value);
  inline void set_bytes_value(const void* value, size_t size);
  inline ::std::string* mutable_bytes_value();
  inline ::std::string* release_bytes_value();
  inline void set_allocated_bytes_value(::std::string* bytes_value);

  // @@protoc_insertion_point(class_scope:Property)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_int32_value();
  inline void clear_has_int32_value();
  inline void set_has_int64_value();
  inline void clear_has_int64_value();
  inline void set_has_uint32_value();
  inline void clear_has_uint32_value();
  inline void set_has_uint64_value();
  inline void clear_has_uint64_value();
  inline void set_has_sint32_value();
  inline void clear_has_sint32_value();
  inline void set_has_sint64_value();
  inline void clear_has_sint64_value();
  inline void set_has_fixed32_value();
  inline void clear_has_fixed32_value();
  inline void set_has_fixed64_value();
  inline void clear_has_fixed64_value();
  inline void set_has_sfixed32_value();
  inline void clear_has_sfixed32_value();
  inline void set_has_sfixed64_value();
  inline void clear_has_sfixed64_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_bytes_value();
  inline void clear_has_bytes_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  double double_value_;
  float float_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::int64 int64_value_;
  ::google::protobuf::uint64 uint64_value_;
  ::google::protobuf::uint32 uint32_value_;
  ::google::protobuf::int32 sint32_value_;
  ::google::protobuf::int64 sint64_value_;
  ::google::protobuf::uint64 fixed64_value_;
  ::google::protobuf::uint32 fixed32_value_;
  ::google::protobuf::int32 sfixed32_value_;
  ::google::protobuf::int64 sfixed64_value_;
  ::std::string* string_value_;
  ::std::string* bytes_value_;
  bool bool_value_;
  friend void  protobuf_AddDesc_Properties_2eproto();
  friend void protobuf_AssignDesc_Properties_2eproto();
  friend void protobuf_ShutdownFile_Properties_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class Properties : public ::google::protobuf::Message {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties& default_instance();

  void Swap(Properties* other);

  // implements Message ----------------------------------------------

  Properties* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Property properties = 1;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 1;
  inline const ::Property& properties(int index) const;
  inline ::Property* mutable_properties(int index);
  inline ::Property* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::Property >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::Property >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:Properties)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Property > properties_;
  friend void  protobuf_AddDesc_Properties_2eproto();
  friend void protobuf_AssignDesc_Properties_2eproto();
  friend void protobuf_ShutdownFile_Properties_2eproto();

  void InitAsDefaultInstance();
  static Properties* default_instance_;

public:
  void add_property(Property value);
  Property get_property(string name);
  Property get;

  void add_double_property(string name, double value);
  void add_float_property(string name, float value);
  void add_int32_property(string name, google::protobuf::int32 value);
  void add_int64_property(string name, google::protobuf::int64 value);
  void add_uint32_property(string name, google::protobuf::uint32 value);
  void add_uint64_property(string name, google::protobuf::uint64 value);
  void add_sint32_property(string name, google::protobuf::int32 value);
  void add_sint64_property(string name, google::protobuf::int64 value);
  void add_fixed32_property(string name, google::protobuf::uint32 value);
  void add_fixed64_property(string name, google::protobuf::uint64 value);
  void add_sfixed32_property(string name, google::protobuf::int32 value);
  void add_sfixed64_property(string name, google::protobuf::int64 value);
  void add_bool_property(string name, bool value);
  void add_string_property(string name, string value);
  void add_bytes_property(string name, const char* value);

  double get_double_property(string name);
  float get_float_property(string name);
  google::protobuf::int32 get_int32_property(string name);
  google::protobuf::int64 get_int64_property(string name);
  google::protobuf::uint32 get_uint32_property(string name);
  google::protobuf::uint64 get_uint64_property(string name);
  google::protobuf::int32 get_sint32_property(string name);
  google::protobuf::int64 get_sint64_property(string name);
  google::protobuf::uint32 get_fixed32_property(string name);
  google::protobuf::uint64 get_fixed64_property(string name);
  google::protobuf::int32 get_sfixed32_property(string name);
  google::protobuf::int64 get_sfixed64_property(string name);
  bool get_bool_property(string name);
  string get_string_property(string name);
  string get_bytes_property(string name);
};
// ===================================================================


// ===================================================================

// Property

// required string name = 1;
inline bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:Property.name)
  return *name_;
}
inline void Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Property.name)
}
inline void Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Property.name)
}
inline ::std::string* Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Property.name)
  return name_;
}
inline ::std::string* Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.name)
}

// optional double double_value = 2;
inline bool Property::has_double_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_double_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double Property::double_value() const {
  // @@protoc_insertion_point(field_get:Property.double_value)
  return double_value_;
}
inline void Property::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:Property.double_value)
}

// optional float float_value = 3;
inline bool Property::has_float_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Property::set_has_float_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Property::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Property::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float Property::float_value() const {
  // @@protoc_insertion_point(field_get:Property.float_value)
  return float_value_;
}
inline void Property::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:Property.float_value)
}

// optional int32 int32_value = 4;
inline bool Property::has_int32_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Property::set_has_int32_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Property::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Property::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
inline ::google::protobuf::int32 Property::int32_value() const {
  // @@protoc_insertion_point(field_get:Property.int32_value)
  return int32_value_;
}
inline void Property::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:Property.int32_value)
}

// optional int64 int64_value = 5;
inline bool Property::has_int64_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Property::set_has_int64_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Property::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Property::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
inline ::google::protobuf::int64 Property::int64_value() const {
  // @@protoc_insertion_point(field_get:Property.int64_value)
  return int64_value_;
}
inline void Property::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
  // @@protoc_insertion_point(field_set:Property.int64_value)
}

// optional uint32 uint32_value = 6;
inline bool Property::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Property::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Property::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Property::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
inline ::google::protobuf::uint32 Property::uint32_value() const {
  // @@protoc_insertion_point(field_get:Property.uint32_value)
  return uint32_value_;
}
inline void Property::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
  // @@protoc_insertion_point(field_set:Property.uint32_value)
}

// optional uint64 uint64_value = 7;
inline bool Property::has_uint64_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Property::set_has_uint64_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Property::clear_has_uint64_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Property::clear_uint64_value() {
  uint64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_value();
}
inline ::google::protobuf::uint64 Property::uint64_value() const {
  // @@protoc_insertion_point(field_get:Property.uint64_value)
  return uint64_value_;
}
inline void Property::set_uint64_value(::google::protobuf::uint64 value) {
  set_has_uint64_value();
  uint64_value_ = value;
  // @@protoc_insertion_point(field_set:Property.uint64_value)
}

// optional sint32 sint32_value = 8;
inline bool Property::has_sint32_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Property::set_has_sint32_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Property::clear_has_sint32_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Property::clear_sint32_value() {
  sint32_value_ = 0;
  clear_has_sint32_value();
}
inline ::google::protobuf::int32 Property::sint32_value() const {
  // @@protoc_insertion_point(field_get:Property.sint32_value)
  return sint32_value_;
}
inline void Property::set_sint32_value(::google::protobuf::int32 value) {
  set_has_sint32_value();
  sint32_value_ = value;
  // @@protoc_insertion_point(field_set:Property.sint32_value)
}

// optional sint64 sint64_value = 9;
inline bool Property::has_sint64_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Property::set_has_sint64_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Property::clear_has_sint64_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Property::clear_sint64_value() {
  sint64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint64_value();
}
inline ::google::protobuf::int64 Property::sint64_value() const {
  // @@protoc_insertion_point(field_get:Property.sint64_value)
  return sint64_value_;
}
inline void Property::set_sint64_value(::google::protobuf::int64 value) {
  set_has_sint64_value();
  sint64_value_ = value;
  // @@protoc_insertion_point(field_set:Property.sint64_value)
}

// optional fixed32 fixed32_value = 10;
inline bool Property::has_fixed32_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Property::set_has_fixed32_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Property::clear_has_fixed32_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Property::clear_fixed32_value() {
  fixed32_value_ = 0u;
  clear_has_fixed32_value();
}
inline ::google::protobuf::uint32 Property::fixed32_value() const {
  // @@protoc_insertion_point(field_get:Property.fixed32_value)
  return fixed32_value_;
}
inline void Property::set_fixed32_value(::google::protobuf::uint32 value) {
  set_has_fixed32_value();
  fixed32_value_ = value;
  // @@protoc_insertion_point(field_set:Property.fixed32_value)
}

// optional fixed64 fixed64_value = 11;
inline bool Property::has_fixed64_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Property::set_has_fixed64_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Property::clear_has_fixed64_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Property::clear_fixed64_value() {
  fixed64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_fixed64_value();
}
inline ::google::protobuf::uint64 Property::fixed64_value() const {
  // @@protoc_insertion_point(field_get:Property.fixed64_value)
  return fixed64_value_;
}
inline void Property::set_fixed64_value(::google::protobuf::uint64 value) {
  set_has_fixed64_value();
  fixed64_value_ = value;
  // @@protoc_insertion_point(field_set:Property.fixed64_value)
}

// optional sfixed32 sfixed32_value = 12;
inline bool Property::has_sfixed32_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Property::set_has_sfixed32_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Property::clear_has_sfixed32_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Property::clear_sfixed32_value() {
  sfixed32_value_ = 0;
  clear_has_sfixed32_value();
}
inline ::google::protobuf::int32 Property::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:Property.sfixed32_value)
  return sfixed32_value_;
}
inline void Property::set_sfixed32_value(::google::protobuf::int32 value) {
  set_has_sfixed32_value();
  sfixed32_value_ = value;
  // @@protoc_insertion_point(field_set:Property.sfixed32_value)
}

// optional sfixed64 sfixed64_value = 13;
inline bool Property::has_sfixed64_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Property::set_has_sfixed64_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Property::clear_has_sfixed64_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Property::clear_sfixed64_value() {
  sfixed64_value_ = GOOGLE_LONGLONG(0);
  clear_has_sfixed64_value();
}
inline ::google::protobuf::int64 Property::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:Property.sfixed64_value)
  return sfixed64_value_;
}
inline void Property::set_sfixed64_value(::google::protobuf::int64 value) {
  set_has_sfixed64_value();
  sfixed64_value_ = value;
  // @@protoc_insertion_point(field_set:Property.sfixed64_value)
}

// optional bool bool_value = 14;
inline bool Property::has_bool_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Property::set_has_bool_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Property::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Property::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool Property::bool_value() const {
  // @@protoc_insertion_point(field_get:Property.bool_value)
  return bool_value_;
}
inline void Property::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:Property.bool_value)
}

// optional string string_value = 15;
inline bool Property::has_string_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Property::set_has_string_value() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Property::clear_has_string_value() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Property::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& Property::string_value() const {
  // @@protoc_insertion_point(field_get:Property.string_value)
  return *string_value_;
}
inline void Property::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
  // @@protoc_insertion_point(field_set:Property.string_value)
}
inline void Property::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Property.string_value)
}
inline void Property::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Property.string_value)
}
inline ::std::string* Property::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Property.string_value)
  return string_value_;
}
inline ::std::string* Property::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Property::set_allocated_string_value(::std::string* string_value) {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (string_value) {
    set_has_string_value();
    string_value_ = string_value;
  } else {
    clear_has_string_value();
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.string_value)
}

// optional bytes bytes_value = 16;
inline bool Property::has_bytes_value() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Property::set_has_bytes_value() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Property::clear_has_bytes_value() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Property::clear_bytes_value() {
  if (bytes_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_value_->clear();
  }
  clear_has_bytes_value();
}
inline const ::std::string& Property::bytes_value() const {
  // @@protoc_insertion_point(field_get:Property.bytes_value)
  return *bytes_value_;
}
inline void Property::set_bytes_value(const ::std::string& value) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(value);
  // @@protoc_insertion_point(field_set:Property.bytes_value)
}
inline void Property::set_bytes_value(const char* value) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Property.bytes_value)
}
inline void Property::set_bytes_value(const void* value, size_t size) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Property.bytes_value)
}
inline ::std::string* Property::mutable_bytes_value() {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Property.bytes_value)
  return bytes_value_;
}
inline ::std::string* Property::release_bytes_value() {
  clear_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bytes_value_;
    bytes_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Property::set_allocated_bytes_value(::std::string* bytes_value) {
  if (bytes_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytes_value_;
  }
  if (bytes_value) {
    set_has_bytes_value();
    bytes_value_ = bytes_value;
  } else {
    clear_has_bytes_value();
    bytes_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Property.bytes_value)
}

// -------------------------------------------------------------------

// Properties

// repeated .Property properties = 1;
inline int Properties::properties_size() const {
  return properties_.size();
}
inline void Properties::clear_properties() {
  properties_.Clear();
}
inline const ::Property& Properties::properties(int index) const {
  // @@protoc_insertion_point(field_get:Properties.properties)
  return properties_.Get(index);
}
inline ::Property* Properties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Properties.properties)
  return properties_.Mutable(index);
}
inline ::Property* Properties::add_properties() {
  // @@protoc_insertion_point(field_add:Properties.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Property >&
Properties::properties() const {
  // @@protoc_insertion_point(field_list:Properties.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::Property >*
Properties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Properties.properties)
  return &properties_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Properties_2eproto__INCLUDED
