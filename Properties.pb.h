// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Properties.proto

#ifndef PROTOBUF_Properties_2eproto__INCLUDED
#define PROTOBUF_Properties_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Properties_2eproto();
void protobuf_AssignDesc_Properties_2eproto();
void protobuf_ShutdownFile_Properties_2eproto();

class Properties;

// ===================================================================

class Properties : public ::google::protobuf::Message {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties& default_instance();

  void Swap(Properties* other);

  // implements Message ----------------------------------------------

  Properties* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 width = 3 [default = 1280];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 4 [default = 720];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional bool useOpenGL = 5 [default = false];
  inline bool has_useopengl() const;
  inline void clear_useopengl();
  static const int kUseOpenGLFieldNumber = 5;
  inline bool useopengl() const;
  inline void set_useopengl(bool value);

  // optional int32 openGLMajorVersion = 6 [default = 2];
  inline bool has_openglmajorversion() const;
  inline void clear_openglmajorversion();
  static const int kOpenGLMajorVersionFieldNumber = 6;
  inline ::google::protobuf::int32 openglmajorversion() const;
  inline void set_openglmajorversion(::google::protobuf::int32 value);

  // optional int32 openGLMinorVersion = 7 [default = 1];
  inline bool has_openglminorversion() const;
  inline void clear_openglminorversion();
  static const int kOpenGLMinorVersionFieldNumber = 7;
  inline ::google::protobuf::int32 openglminorversion() const;
  inline void set_openglminorversion(::google::protobuf::int32 value);

  // optional int32 flags = 8 [default = 4];
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 8;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional bool showCursor = 9 [default = true];
  inline bool has_showcursor() const;
  inline void clear_showcursor();
  static const int kShowCursorFieldNumber = 9;
  inline bool showcursor() const;
  inline void set_showcursor(bool value);

  // optional int32 scrollAmount = 10 [default = 10];
  inline bool has_scrollamount() const;
  inline void clear_scrollamount();
  static const int kScrollAmountFieldNumber = 10;
  inline ::google::protobuf::int32 scrollamount() const;
  inline void set_scrollamount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Properties)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_useopengl();
  inline void clear_has_useopengl();
  inline void set_has_openglmajorversion();
  inline void clear_has_openglmajorversion();
  inline void set_has_openglminorversion();
  inline void clear_has_openglminorversion();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_showcursor();
  inline void clear_has_showcursor();
  inline void set_has_scrollamount();
  inline void clear_has_scrollamount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* icon_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 openglmajorversion_;
  ::google::protobuf::int32 openglminorversion_;
  bool useopengl_;
  bool showcursor_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 scrollamount_;
  friend void  protobuf_AddDesc_Properties_2eproto();
  friend void protobuf_AssignDesc_Properties_2eproto();
  friend void protobuf_ShutdownFile_Properties_2eproto();

  void InitAsDefaultInstance();
  static Properties* default_instance_;
};
// ===================================================================


// ===================================================================

// Properties

// required string title = 1;
inline bool Properties::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Properties::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Properties::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Properties::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Properties::title() const {
  // @@protoc_insertion_point(field_get:Properties.title)
  return *title_;
}
inline void Properties::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Properties.title)
}
inline void Properties::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Properties.title)
}
inline void Properties::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Properties.title)
}
inline ::std::string* Properties::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Properties.title)
  return title_;
}
inline ::std::string* Properties::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Properties::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Properties.title)
}

// optional string icon = 2;
inline bool Properties::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Properties::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Properties::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Properties::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& Properties::icon() const {
  // @@protoc_insertion_point(field_get:Properties.icon)
  return *icon_;
}
inline void Properties::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:Properties.icon)
}
inline void Properties::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:Properties.icon)
}
inline void Properties::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Properties.icon)
}
inline ::std::string* Properties::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Properties.icon)
  return icon_;
}
inline ::std::string* Properties::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Properties::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Properties.icon)
}

// required int32 width = 3 [default = 1280];
inline bool Properties::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Properties::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Properties::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Properties::clear_width() {
  width_ = 1280;
  clear_has_width();
}
inline ::google::protobuf::int32 Properties::width() const {
  // @@protoc_insertion_point(field_get:Properties.width)
  return width_;
}
inline void Properties::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Properties.width)
}

// required int32 height = 4 [default = 720];
inline bool Properties::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Properties::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Properties::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Properties::clear_height() {
  height_ = 720;
  clear_has_height();
}
inline ::google::protobuf::int32 Properties::height() const {
  // @@protoc_insertion_point(field_get:Properties.height)
  return height_;
}
inline void Properties::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Properties.height)
}

// optional bool useOpenGL = 5 [default = false];
inline bool Properties::has_useopengl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Properties::set_has_useopengl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Properties::clear_has_useopengl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Properties::clear_useopengl() {
  useopengl_ = false;
  clear_has_useopengl();
}
inline bool Properties::useopengl() const {
  // @@protoc_insertion_point(field_get:Properties.useOpenGL)
  return useopengl_;
}
inline void Properties::set_useopengl(bool value) {
  set_has_useopengl();
  useopengl_ = value;
  // @@protoc_insertion_point(field_set:Properties.useOpenGL)
}

// optional int32 openGLMajorVersion = 6 [default = 2];
inline bool Properties::has_openglmajorversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Properties::set_has_openglmajorversion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Properties::clear_has_openglmajorversion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Properties::clear_openglmajorversion() {
  openglmajorversion_ = 2;
  clear_has_openglmajorversion();
}
inline ::google::protobuf::int32 Properties::openglmajorversion() const {
  // @@protoc_insertion_point(field_get:Properties.openGLMajorVersion)
  return openglmajorversion_;
}
inline void Properties::set_openglmajorversion(::google::protobuf::int32 value) {
  set_has_openglmajorversion();
  openglmajorversion_ = value;
  // @@protoc_insertion_point(field_set:Properties.openGLMajorVersion)
}

// optional int32 openGLMinorVersion = 7 [default = 1];
inline bool Properties::has_openglminorversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Properties::set_has_openglminorversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Properties::clear_has_openglminorversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Properties::clear_openglminorversion() {
  openglminorversion_ = 1;
  clear_has_openglminorversion();
}
inline ::google::protobuf::int32 Properties::openglminorversion() const {
  // @@protoc_insertion_point(field_get:Properties.openGLMinorVersion)
  return openglminorversion_;
}
inline void Properties::set_openglminorversion(::google::protobuf::int32 value) {
  set_has_openglminorversion();
  openglminorversion_ = value;
  // @@protoc_insertion_point(field_set:Properties.openGLMinorVersion)
}

// optional int32 flags = 8 [default = 4];
inline bool Properties::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Properties::set_has_flags() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Properties::clear_has_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Properties::clear_flags() {
  flags_ = 4;
  clear_has_flags();
}
inline ::google::protobuf::int32 Properties::flags() const {
  // @@protoc_insertion_point(field_get:Properties.flags)
  return flags_;
}
inline void Properties::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Properties.flags)
}

// optional bool showCursor = 9 [default = true];
inline bool Properties::has_showcursor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Properties::set_has_showcursor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Properties::clear_has_showcursor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Properties::clear_showcursor() {
  showcursor_ = true;
  clear_has_showcursor();
}
inline bool Properties::showcursor() const {
  // @@protoc_insertion_point(field_get:Properties.showCursor)
  return showcursor_;
}
inline void Properties::set_showcursor(bool value) {
  set_has_showcursor();
  showcursor_ = value;
  // @@protoc_insertion_point(field_set:Properties.showCursor)
}

// optional int32 scrollAmount = 10 [default = 10];
inline bool Properties::has_scrollamount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Properties::set_has_scrollamount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Properties::clear_has_scrollamount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Properties::clear_scrollamount() {
  scrollamount_ = 10;
  clear_has_scrollamount();
}
inline ::google::protobuf::int32 Properties::scrollamount() const {
  // @@protoc_insertion_point(field_get:Properties.scrollAmount)
  return scrollamount_;
}
inline void Properties::set_scrollamount(::google::protobuf::int32 value) {
  set_has_scrollamount();
  scrollamount_ = value;
  // @@protoc_insertion_point(field_set:Properties.scrollAmount)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Properties_2eproto__INCLUDED
